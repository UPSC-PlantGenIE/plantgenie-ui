name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'yarn'

      - name: Cache Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            crust/target/ # Cache the target dir of your wasm project
          # Adjust 'my_wasm_crate/Cargo.lock' if your Cargo.lock is elsewhere or named differently
          key: ${{ runner.os }}-cargo-crust-${{ hashFiles('crust/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-crust-

      - name: Install Rust and Cargo
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.86.0
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh -s -- -y
          # wasm-pack is typically installed to $HOME/.cargo/bin, which is already in GITHUB_PATH

      - name: Build WASM package
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          # Ensure the output directory for wasm exists relative to the repo root
          mkdir -p src/wasm
          cd crust
          wasm-pack build --target web --out-dir ../src/wasm --release
          cd ..
          echo "WASM package built into src/wasm:"
          ls -la src/wasm

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # - name: Run linter
      #   run: yarn lint

      - name: Check base url
        env:
          VITE_API_BASE_URL: ${{ env.VITE_API_BASE_URL }}
          VITE_APP_TITLE: ${{ env.VITE_APP_TITLE }}
        run: echo $VITE_API_BASE_URL

      - name: Build project
        env:
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
          VITE_APP_TITLE: ${{ vars.VITE_APP_TITLE }}
          VITE_APP_VERSION: ${{ github.ref_name }}
        run: yarn build

      - name: Zip build artifacts
        run: zip -r plantgenie-ui-${{ github.ref_name }}.zip dist

      - name: Upload zipped build artifact
        uses: actions/upload-artifact@v4
        with:
          name: plantgenie-ui
          path: plantgenie-ui-${{ github.ref_name }}.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: plantgenie-ui
          path: .

      - name: Create a release
        uses: softprops/action-gh-release@v2
        with:
          files: plantgenie-ui-${{ github.ref_name }}.zip
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: "New release of plantgenie-ui"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
